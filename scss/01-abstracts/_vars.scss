@use "_mixins" as *;
@use '_functions' as *;

// breakpoints
$breakpoint-sm: "max-width: 576px";
$breakpoint-md: "max-width: 768px";
$breakpoint-lg: "max-width: 992px";
$breakpoint-xl: "max-width: 1200px";

// note: the color variables are in HSL/HSLA format 
$mainColors: (
  "black": "0 0% 0%",
  "white": "0 0% 100%",
 

  "forrest_green": "120 100% 20%",
);


// the idea are colors that I do not need shades of 
$subColors: (
  "red": "0 100% 50%",
  "burntorange": "17 100% 40%",
  "green": "120 44% 34%",
  //"blue": "240 100% 50%",
  //"maroon": "0 100% 20%",
);

$colorsGrey: (
  //"light_grey": "0 0% 83% 0.75",
  // former "light-grey" ... same color but dark greay color

  "grey-l13": "0 0% 13%",
  "grey-l15": "0 0% 15%",
  "grey-l20": "0 0% 20%",
  "grey-l24": "0 0% 24%",
  "grey-l32": "0 0% 32%",

);

$novThemeColors: (


);

// rename this later, perhaps 
// $themeColorNames

:root {
  // for regular colors
  @each $key, $value in $mainColors {

    // could i use a mixin for this?
    --#{$key}: hsla(#{$value});
    --#{$key}-a75: hsla(#{$value} / .75);
    --#{$key}-a50: hsla(#{$value} / .5);
    --#{$key}-a25: hsla(#{$value} / .25);
  }

  @each $key, $value in $subColors {
    --#{$key}: hsla(#{$value});
  }

  @each $key, $value in $colorsGrey {
    --#{$key}: hsla(#{$value});
  }

  // Theme loop
  // no need for hsla here
  @each $key, $value in $novThemeColors {
      // could i use a mixin for this?
      --#{$key}: hsla(#{$value});
      --#{$key}-a75: hsla(#{$value} / .75);
      --#{$key}-a50: hsla(#{$value} / .5);
      --#{$key}-a25: hsla(#{$value} / .25);
  }

  // old themeColor 1 
  --themeColorL: hsla(35 60% 96%);

  // old themeColor 2 
  --themeColorAccentL: hsla(181 100% 20%);
  
  // old themeColor 3
  --themeColorMain: hsla(20 86% 36%);

  // old themeColor 4
  --themeColorAccentD: hsla(16 50% 24%);

  // old themeColor 5
  --themeColorD: hsla(0 0% 20%);


  // End Colors
  ///////////////////////////////////

  ///////////////////////////////////
  // Fonts
  --Verdana: verdana, geneva, arial, helvetica, sans-serif;
  --TNR: "Times New Roman", times, serif;
  --Courier: "Courier New", courier, monospace;
  --Helvetica: "Helvetica Neue", helvetica, sans-serif;
  --MSSans: "MS Sans Serif", geneva, sans-serif;
  --SegoeUI: "Segoe UI", arial, helvetica, sans-serif;
  --Tahoma: tahoma, verdana, segoe, sans-serif;
  --Arial: arial, helvetica, san-serif;
  --Roboto:
    "Roboto",
    -apple-system,
    blinkmacsystemfont,
    "Segoe UI",
    roboto,
    "Helvetica Neue",
    arial,
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol";
  --Ubuntu:
    "Ubuntu",
    -apple-system,
    "Segoe UI",
    "Roboto",
    "Oxygen",
    "Cantarell",
    "Fira Sans",
    "Droid Sans",
    "Helvetica Neue",
    sans-serif;
  --ForkAwesome: forkawesome, serif;
  --SFMono-Regular: "SFMono-Regular", menlo, monaco, consolas, "Liberation Mono", "Courier New", monospace;
  // this should be named better
  // this was snagged from OMGUbuntu's sit e
  --test: -apple-system, blinkmacsystemfont, "Segoe UI", helvetica, arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";

  ///////////////////////////////////////////////////////////////////////////////////
  // font sizes
  // i think the idea here (wait until webhost is back online to test this) is
  // to consolidate font sizes instead of having CSS for all different sections that are
  // slightly different sizes .. i may still have font-size: HOWEVER they will be one of these vars
  // since i cant test this right now ... I am not sure what to use where though
  --fs-small: 0.75rem;
  --fs-normal: 1.05rem;
  --fs-large: 1.15rem;
  //////////////////////////////////////
  // header font sizes
  --h1: 3rem;
  --h2: 2.25rem;
  --h3: 1.5rem;
  --h4: 1.25rem;
  // guess
  --h5: 1.1rem;

  // fork awesome
  --fa-arrow-right: "\f105";
  --fa-arrow-down: "\f107";
}