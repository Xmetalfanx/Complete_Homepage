@use '../01-intial/index' as *;

// for display:grid, spans two columns
.span2 {
  grid-column: span 2;
}

/******************* Width ********************/
.w-25 {
  width: 25%;
}
.w-30 {
  width: 30%;
}
.w-33 {
  width: 33%;
}
.w-50 {
  width: 50%;
}
.w-75 {
  width: 75%;
}
.w-80 {
  width: 80%;
}
.w-90 {
  width: 90%;
}
.w-95 {
  width: 95%;
}

// ?? what is this for?
.list-group-item {
  border: 0;
}

// May not be needed if things are responsive via Bootstrap
.YTPlaylists {
  width: 560px;
  height: 315px;
}

/****** STARTPAGE Box related ******************/

#SPSearch {
  margin: 10px auto;

  // For the SP icon and input box
  .SPHeightIconInput {
    height: 35px;
  }

  .SPSearchIcon {
    height: 33px;
    vertical-align: middle;
  }
}

.shadow {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

/************** RSS Feed *************/
// For GAOTD too
.feed-item-title {
  a {
    font-weight: 500;
    font-size: 1rem;
    line-height: 1.4rem;
    display: inline-block;
    margin: 0 auto;
  }
}

.feed-item-desc {
  img {
    display: block;
    max-width: 100px;
    height: auto;
    margin: 1rem auto;
  }
}

/*********** End RSS CSS **********/

#outputSection a {
  color: var(--ThemeBGColorAccent);
}

// Footer specially (for now?) in the TechHQ side of the site
#techHQFooter {
  // display: flex;
  //flex-direction: row;

  grid-column: span 2;
  padding-left: 20px;

  a {
    color: inherit;
    margin: 0 1rem;
    font-weight: 500;
  }

  a:hover {
    outline: 1px dotted black;
    text-decoration: none;
  }
}

// is there a need for this to be so hyper-specific?
// (tip: look at grid-template-area)

.softwareCard {
  .card__header--wide {
    grid-template-areas: 'program-title platform';

    .program-title {
      grid-area: program-title;
      align-self: flex-start;
    }

    .platform {
      grid-area: platform;
    }
  }
}

// For Distro and Desktop Frontpages on the LinuxHQ side of the site
#linuxFrontPrimaryContent {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;

  .card {
    min-width: 300px;
    max-height: none;
  }
}

// Media Query
// why is this here? ... shouldn't this be in 02-layout somewhere?
@media (max-width: 794px) {
  .sidebar {
    .card {
      margin-left: 0;
      margin-bottom: 1rem;
    }
  }

  #linuxFrontPrimaryContent {
    .card {
      min-width: 300px;
      padding: 1rem;
    }
  }
}

// not sure i like how hyper specific this is but it does let me clean up bs css class calls in the html
// location: techHQ frontpage
#EducationalSites {
  grid-column: span 2;
  margin-bottom: 0 auto 25px auto;
  text-align: center;
  width: 75%;

  .card__body {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;

    a {
      align-content: center;

      img {
        margin: 0 auto;
        padding: 10px 1.5rem;
      }
    }

    .card__header {
      font-size: 24px;
      font-weight: 700;
    }
  }
}

@media all and (max-width: 794px) {
  #EducationalSites {
    width: 90%;
    grid-column: auto;

    a {
      display: block;
    }
  }
}

// For LinuxHQ distro section and eventually more
#desktopSection {
  .card {
    box-shadow: none;
    border: 1px dotted var(--themeBGColorMain);

    // putting this here since there is a max-height (still need to lookup why i did that) on the main primaryContent .card heigh
    max-height: none;
  } // closes card
} // closes #desktopSection

#linuxVersions {
  // the top level of the column
  .distroBaseTitle {
    text-decoration: underline;
    font-weight: 900;
  }

  // The Titles of the Distro/Versions
  .versionTitle {
    margin-right: 0.5rem;
  }

  // the actual version number
  .version {
    color: var(--themeBGColorAccent);
  }
}

// New idea for screen readers
.hiddenAccessLinkText {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

code {
  @include darkBG;

  display: inline-block;
}

// I THINK the only real point to this below is the Ublock O. browser addon pages ... I need to figure out a btter way to do this
// The IDEA was to use spans and class names below ... this seems silly or un-needed ... un-needed classes or something
.greenText {
  color: var(--green);
}

.redText {
  color: var(--red);
}
